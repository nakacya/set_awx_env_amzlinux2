- hosts: all
  gather_facts: yes
  become: yes

  tasks:

    - name: yum install gcc zlib-devel bzip2 bzip2-devel readline readline-devel sqlite sqlite-devel openssl openssl-devel docker git
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-utils
        - gcc
        - zlib-devel
        - bzip2
        - bzip2-devel
        - readline
        - readline-devel
        - sqlite
        - sqlite-devel
        - openssl
        - openssl-devel
        - docker
        - git

    - git: repo=git://github.com/pyenv/pyenv.git dest=/root/.pyenv accept_hostkey=yes

    - blockinfile:
        path: /root/.bash_profile
        block: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init -)"
 
    - name: set pyrnv enviroment
      shell: bash -lc "pyenv versions | grep {{ python_version }}"
      register: pyenv_version
      ignore_errors: yes
      changed_when: False
 
    - name:  install python {{ python_version }}
      shell: bash -lc "pyenv install {{ python_version }}"
      when: pyenv_version|failed
 
    - shell: bash -lc "pyenv global {{ python_version }}"
      when: pyenv_version|failed
 
    - set_fact: ansible_python_interpreter=/root/.pyenv/shims/python
 
    - name: pip upgrade
      shell: /root/.pyenv/shims/pip install pip --upgrade
      ignore_errors: yes

    - name: pip install docker docker-compose
      pip:
        name: "{{ item }}"
        state: latest
      with_items:
        - docker
        - docker-compose
      ignore_errors: yes
 
    - name: systemctl docker enable start
      systemd:
        state: started
        enabled: yes
        name: docker

    - name: remove ansible awx dir
      file:
        path: /root/awx_old
        state: absent
    - shell: mv /root/awx /root/awx_old
      ignore_errors: True

    - name: git get ansible awx
      git:
        repo: 'https://github.com/ansible/awx'
        dest: /root/awx

    - shell: bash -lc "pyenv local system"

    - name: yum install certbot
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-virtualenv
    - shell: wget -P /usr/local/sbin/ https://dl.eff.org/certbot-auto
    - file:
       path: /usr/local/sbin/certbot-auto
       mode: 0700
#X#    - get_url:
#X#        url: https://dl.eff.org/certbot-auto
#X#        dest: /usr/local/sbin/certbot-auto force=True
#X#        mode: '0700'
    - shell: /usr/local/sbin/certbot-auto --no-bootstrap --install-only

    - name: remote yum update all?
      pause: prompt="remote server yum update all? (y/n)"
      register: yn

    - name: yum all update
      yum:
        name: '*'
        state: latest
      when:  yn.user_input ==  'y'

    - shell: amazon-linux-extras install ansible2

    - name: Start service docker
      service:
        name: docker
        state: started
        enabled: yes

    - name:  need swapfile ?
      pause: prompt="need swap?(2GB) (y/n)"
      register: yn
    - shell: swapoff -a && rm -rf /swapfile
      when:  yn.user_input ==  'y'
    - shell: dd if=/dev/zero of=/swapfile bs=1M count=2048 && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
      when:  yn.user_input ==  'y'
    - blockinfile:
        path: /etc/fstab
        block: |
          /swapfile                                 swap                    swap    defaults        0 0
      when:  yn.user_input ==  'y'

    - name: server reboot?
      pause: prompt="server reboot ok? (y/n)"
      register: yn

    - name: machine reboot
      shell: reboot
      when:  yn.user_input ==  'y'

    - debug:
        msg: " Please login to ssh {{ inventory_hostname }} "
      when:  yn.user_input ==  'y'
    - debug:
        msg: " run 'sudo su'"
      when:  yn.user_input ==  'y'
    - debug:
        msg: " run 'cd /root/awx/installer'"
      when:  yn.user_input ==  'y'

    - name: machine reboot wait
      wait_for_connection:
        connect_timeout: 180
        sleep: 5
        delay: 5
        timeout: 180
      when:  yn.user_input ==  'y'

    - debug:
        msg: " run 'cd /root/awx/installer'"
      when:  yn.user_input ==  'n'
    - debug:
        msg: " run 'ansible-playbook -i inventory install.yml'"
      when:  yn.user_input ==  'n'

